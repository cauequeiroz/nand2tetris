// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way (in=load, sel=address[3..5], a=ram1load, b=ram2load, c=ram3load, d=ram4load, e=ram5load, f=ram6load, g=ram7load, h=ram8load);

    RAM8 (in=in, load=ram1load, address=address[0..2], out=ram1);
    RAM8 (in=in, load=ram2load, address=address[0..2], out=ram2);
    RAM8 (in=in, load=ram3load, address=address[0..2], out=ram3);
    RAM8 (in=in, load=ram4load, address=address[0..2], out=ram4);
    RAM8 (in=in, load=ram5load, address=address[0..2], out=ram5);
    RAM8 (in=in, load=ram6load, address=address[0..2], out=ram6);
    RAM8 (in=in, load=ram7load, address=address[0..2], out=ram7);
    RAM8 (in=in, load=ram8load, address=address[0..2], out=ram8);

    Mux8Way16 (a=ram1, b=ram2, c=ram3, d=ram4, e=ram5, f=ram6, g=ram7, h=ram8, sel=address[3..5], out=out);
}